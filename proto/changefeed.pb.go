// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/changefeed.proto

package changefeedpb

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Op enumerates the types of operations represented in a change event.
type Op int32

const (
	OP_UNSPECIFIED Op = 0
	OP_CREATE      Op = 1
	OP_UPDATE      Op = 2
	OP_DELETE      Op = 3
)

var Op_name = map[int32]string{
	0: "OP_UNSPECIFIED",
	1: "OP_CREATE",
	2: "OP_UPDATE",
	3: "OP_DELETE",
}

var Op_value = map[string]int32{
	"OP_UNSPECIFIED": 0,
	"OP_CREATE":      1,
	"OP_UPDATE":      2,
	"OP_DELETE":      3,
}

func (Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{0}
}

// MessageBatch is a batch of messages for use in webhook sinks.
type MessageBatch struct {
	Payload []*Message `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (m *MessageBatch) Reset()      { *m = MessageBatch{} }
func (*MessageBatch) ProtoMessage() {}
func (*MessageBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{0}
}
func (m *MessageBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBatch.Merge(m, src)
}
func (m *MessageBatch) XXX_Size() int {
	return m.Size()
}
func (m *MessageBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBatch proto.InternalMessageInfo

func (m *MessageBatch) GetPayload() []*Message {
	if m != nil {
		return m.Payload
	}
	return nil
}

// Message is an enum of the different envelope types. This is what will be emitted to the client.
type Message struct {
	// Types that are valid to be assigned to Data:
	//
	//	*Message_Wrapped
	//	*Message_Bare
	//	*Message_Enriched
	//	*Message_Resolved
	//	*Message_BareResolved
	Data isMessage_Data `protobuf_oneof:"data"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Data interface {
	isMessage_Data()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_Wrapped struct {
	Wrapped *WrappedEnvelope `protobuf:"bytes,1,opt,name=wrapped,proto3,oneof" json:"wrapped,omitempty"`
}
type Message_Bare struct {
	Bare *BareEnvelope `protobuf:"bytes,2,opt,name=bare,proto3,oneof" json:"bare,omitempty"`
}
type Message_Enriched struct {
	Enriched *EnrichedEnvelope `protobuf:"bytes,3,opt,name=enriched,proto3,oneof" json:"enriched,omitempty"`
}
type Message_Resolved struct {
	Resolved *Resolved `protobuf:"bytes,4,opt,name=resolved,proto3,oneof" json:"resolved,omitempty"`
}
type Message_BareResolved struct {
	BareResolved *BareResolved `protobuf:"bytes,5,opt,name=bareResolved,proto3,oneof" json:"bareResolved,omitempty"`
}

func (*Message_Wrapped) isMessage_Data()      {}
func (*Message_Bare) isMessage_Data()         {}
func (*Message_Enriched) isMessage_Data()     {}
func (*Message_Resolved) isMessage_Data()     {}
func (*Message_BareResolved) isMessage_Data() {}

func (m *Message) GetData() isMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetWrapped() *WrappedEnvelope {
	if x, ok := m.GetData().(*Message_Wrapped); ok {
		return x.Wrapped
	}
	return nil
}

func (m *Message) GetBare() *BareEnvelope {
	if x, ok := m.GetData().(*Message_Bare); ok {
		return x.Bare
	}
	return nil
}

func (m *Message) GetEnriched() *EnrichedEnvelope {
	if x, ok := m.GetData().(*Message_Enriched); ok {
		return x.Enriched
	}
	return nil
}

func (m *Message) GetResolved() *Resolved {
	if x, ok := m.GetData().(*Message_Resolved); ok {
		return x.Resolved
	}
	return nil
}

func (m *Message) GetBareResolved() *BareResolved {
	if x, ok := m.GetData().(*Message_BareResolved); ok {
		return x.BareResolved
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Wrapped)(nil),
		(*Message_Bare)(nil),
		(*Message_Enriched)(nil),
		(*Message_Resolved)(nil),
		(*Message_BareResolved)(nil),
	}
}

// WrappedEnvelope includes both the changed data and contextual metadata about the change.
type WrappedEnvelope struct {
	After         *Record `protobuf:"bytes,1,opt,name=after,proto3" json:"after,omitempty"`
	Before        *Record `protobuf:"bytes,2,opt,name=before,proto3" json:"before,omitempty"`
	Updated       string  `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated,omitempty"`
	MvccTimestamp string  `protobuf:"bytes,5,opt,name=mvcc_timestamp,json=mvccTimestamp,proto3" json:"mvcc_timestamp,omitempty"`
	Key           *Key    `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Topic         string  `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *WrappedEnvelope) Reset()      { *m = WrappedEnvelope{} }
func (*WrappedEnvelope) ProtoMessage() {}
func (*WrappedEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{2}
}
func (m *WrappedEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrappedEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrappedEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrappedEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrappedEnvelope.Merge(m, src)
}
func (m *WrappedEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *WrappedEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_WrappedEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_WrappedEnvelope proto.InternalMessageInfo

func (m *WrappedEnvelope) GetAfter() *Record {
	if m != nil {
		return m.After
	}
	return nil
}

func (m *WrappedEnvelope) GetBefore() *Record {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *WrappedEnvelope) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *WrappedEnvelope) GetMvccTimestamp() string {
	if m != nil {
		return m.MvccTimestamp
	}
	return ""
}

func (m *WrappedEnvelope) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *WrappedEnvelope) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

// BareEnvelope contains change data as a flat map along with
// CockroachDB-specific metadata under the '__crdb__' field.
type BareEnvelope struct {
	Values  map[string]*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XCrdb__ *Metadata         `protobuf:"bytes,2,opt,name=__crdb__,json=Crdb,proto3" json:"__crdb__,omitempty"`
}

func (m *BareEnvelope) Reset()      { *m = BareEnvelope{} }
func (*BareEnvelope) ProtoMessage() {}
func (*BareEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{3}
}
func (m *BareEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BareEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BareEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BareEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BareEnvelope.Merge(m, src)
}
func (m *BareEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *BareEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_BareEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_BareEnvelope proto.InternalMessageInfo

func (m *BareEnvelope) GetValues() map[string]*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *BareEnvelope) GetXCrdb__() *Metadata {
	if m != nil {
		return m.XCrdb__
	}
	return nil
}

// BareResolved is a minimal envelope that wraps a resolved timestamp in a '__crdb__' field.
type BareResolved struct {
	XCrdb__ *Resolved `protobuf:"bytes,1,opt,name=__crdb__,json=Crdb,proto3" json:"__crdb__,omitempty"`
}

func (m *BareResolved) Reset()      { *m = BareResolved{} }
func (*BareResolved) ProtoMessage() {}
func (*BareResolved) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{4}
}
func (m *BareResolved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BareResolved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BareResolved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BareResolved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BareResolved.Merge(m, src)
}
func (m *BareResolved) XXX_Size() int {
	return m.Size()
}
func (m *BareResolved) XXX_DiscardUnknown() {
	xxx_messageInfo_BareResolved.DiscardUnknown(m)
}

var xxx_messageInfo_BareResolved proto.InternalMessageInfo

func (m *BareResolved) GetXCrdb__() *Resolved {
	if m != nil {
		return m.XCrdb__
	}
	return nil
}

// EnrichedEnvelope includes detailed context about the change event and source.
type EnrichedEnvelope struct {
	After  *Record         `protobuf:"bytes,1,opt,name=after,proto3" json:"after,omitempty"`
	Before *Record         `protobuf:"bytes,2,opt,name=before,proto3" json:"before,omitempty"`
	Op     Op              `protobuf:"varint,3,opt,name=op,proto3,enum=changefeedpb.Op" json:"op,omitempty"`
	Key    *Key            `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	TsNs   int64           `protobuf:"varint,5,opt,name=ts_ns,json=tsNs,proto3" json:"ts_ns,omitempty"`
	Source *EnrichedSource `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *EnrichedEnvelope) Reset()      { *m = EnrichedEnvelope{} }
func (*EnrichedEnvelope) ProtoMessage() {}
func (*EnrichedEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{5}
}
func (m *EnrichedEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnrichedEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnrichedEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnrichedEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnrichedEnvelope.Merge(m, src)
}
func (m *EnrichedEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *EnrichedEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_EnrichedEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_EnrichedEnvelope proto.InternalMessageInfo

func (m *EnrichedEnvelope) GetAfter() *Record {
	if m != nil {
		return m.After
	}
	return nil
}

func (m *EnrichedEnvelope) GetBefore() *Record {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *EnrichedEnvelope) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return OP_UNSPECIFIED
}

func (m *EnrichedEnvelope) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *EnrichedEnvelope) GetTsNs() int64 {
	if m != nil {
		return m.TsNs
	}
	return 0
}

func (m *EnrichedEnvelope) GetSource() *EnrichedSource {
	if m != nil {
		return m.Source
	}
	return nil
}

// Resolved carries resolved timestamp information for a changefeed span.
type Resolved struct {
	Resolved string `protobuf:"bytes,1,opt,name=resolved,proto3" json:"resolved,omitempty"`
}

func (m *Resolved) Reset()      { *m = Resolved{} }
func (*Resolved) ProtoMessage() {}
func (*Resolved) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{6}
}
func (m *Resolved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resolved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resolved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resolved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resolved.Merge(m, src)
}
func (m *Resolved) XXX_Size() int {
	return m.Size()
}
func (m *Resolved) XXX_DiscardUnknown() {
	xxx_messageInfo_Resolved.DiscardUnknown(m)
}

var xxx_messageInfo_Resolved proto.InternalMessageInfo

func (m *Resolved) GetResolved() string {
	if m != nil {
		return m.Resolved
	}
	return ""
}

// EnrichedSource records information about the origin and context
// of a change event, for operational traceability.
type EnrichedSource struct {
	JobId              string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	ChangefeedSink     string   `protobuf:"bytes,2,opt,name=changefeed_sink,json=changefeedSink,proto3" json:"changefeed_sink,omitempty"`
	DbVersion          string   `protobuf:"bytes,3,opt,name=db_version,json=dbVersion,proto3" json:"db_version,omitempty"`
	ClusterName        string   `protobuf:"bytes,4,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	ClusterId          string   `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	SourceNodeLocality string   `protobuf:"bytes,6,opt,name=source_node_locality,json=sourceNodeLocality,proto3" json:"source_node_locality,omitempty"`
	NodeName           string   `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	NodeId             string   `protobuf:"bytes,8,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	MvccTimestamp      string   `protobuf:"bytes,9,opt,name=mvcc_timestamp,json=mvccTimestamp,proto3" json:"mvcc_timestamp,omitempty"`
	TsNs               int64    `protobuf:"varint,10,opt,name=ts_ns,json=tsNs,proto3" json:"ts_ns,omitempty"`
	TsHlc              string   `protobuf:"bytes,11,opt,name=ts_hlc,json=tsHlc,proto3" json:"ts_hlc,omitempty"`
	Origin             string   `protobuf:"bytes,12,opt,name=origin,proto3" json:"origin,omitempty"`
	DatabaseName       string   `protobuf:"bytes,13,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	SchemaName         string   `protobuf:"bytes,14,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName          string   `protobuf:"bytes,15,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	PrimaryKeys        []string `protobuf:"bytes,16,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
}

func (m *EnrichedSource) Reset()      { *m = EnrichedSource{} }
func (*EnrichedSource) ProtoMessage() {}
func (*EnrichedSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{7}
}
func (m *EnrichedSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnrichedSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnrichedSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnrichedSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnrichedSource.Merge(m, src)
}
func (m *EnrichedSource) XXX_Size() int {
	return m.Size()
}
func (m *EnrichedSource) XXX_DiscardUnknown() {
	xxx_messageInfo_EnrichedSource.DiscardUnknown(m)
}

var xxx_messageInfo_EnrichedSource proto.InternalMessageInfo

func (m *EnrichedSource) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *EnrichedSource) GetChangefeedSink() string {
	if m != nil {
		return m.ChangefeedSink
	}
	return ""
}

func (m *EnrichedSource) GetDbVersion() string {
	if m != nil {
		return m.DbVersion
	}
	return ""
}

func (m *EnrichedSource) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *EnrichedSource) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *EnrichedSource) GetSourceNodeLocality() string {
	if m != nil {
		return m.SourceNodeLocality
	}
	return ""
}

func (m *EnrichedSource) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *EnrichedSource) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *EnrichedSource) GetMvccTimestamp() string {
	if m != nil {
		return m.MvccTimestamp
	}
	return ""
}

func (m *EnrichedSource) GetTsNs() int64 {
	if m != nil {
		return m.TsNs
	}
	return 0
}

func (m *EnrichedSource) GetTsHlc() string {
	if m != nil {
		return m.TsHlc
	}
	return ""
}

func (m *EnrichedSource) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *EnrichedSource) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func (m *EnrichedSource) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *EnrichedSource) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *EnrichedSource) GetPrimaryKeys() []string {
	if m != nil {
		return m.PrimaryKeys
	}
	return nil
}

// Metadata contains CockroachDB-specific metadata about a change event.
// This message is also referred to as '__crdb__'.
type Metadata struct {
	Updated       string `protobuf:"bytes,1,opt,name=updated,proto3" json:"updated,omitempty"`
	MvccTimestamp string `protobuf:"bytes,2,opt,name=mvcc_timestamp,json=mvccTimestamp,proto3" json:"mvcc_timestamp,omitempty"`
	Key           *Key   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Topic         string `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{8}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Metadata) GetMvccTimestamp() string {
	if m != nil {
		return m.MvccTimestamp
	}
	return ""
}

func (m *Metadata) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Metadata) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

// Value represents a value of arbitrary type carried in a change event.
type Value struct {
	// Types that are valid to be assigned to Value:
	//
	//	*Value_StringValue
	//	*Value_BytesValue
	//	*Value_Int32Value
	//	*Value_Int64Value
	//	*Value_FloatValue
	//	*Value_DoubleValue
	//	*Value_BoolValue
	//	*Value_TimestampValue
	//	*Value_ArrayValue
	//	*Value_TupleValue
	//	*Value_DecimalValue
	//	*Value_DateValue
	//	*Value_IntervalValue
	//	*Value_TimeValue
	//	*Value_UuidValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (m *Value) Reset()      { *m = Value{} }
func (*Value) ProtoMessage() {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{9}
}
func (m *Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return m.Size()
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

type isValue_Value interface {
	isValue_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
}
type Value_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,2,opt,name=bytes_value,json=bytesValue,proto3,oneof" json:"bytes_value,omitempty"`
}
type Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3,oneof" json:"int32_value,omitempty"`
}
type Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3,oneof" json:"int64_value,omitempty"`
}
type Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=float_value,json=floatValue,proto3,oneof" json:"float_value,omitempty"`
}
type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue,proto3,oneof" json:"double_value,omitempty"`
}
type Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
}
type Value_TimestampValue struct {
	TimestampValue *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timestamp_value,json=timestampValue,proto3,oneof" json:"timestamp_value,omitempty"`
}
type Value_ArrayValue struct {
	ArrayValue *Array `protobuf:"bytes,9,opt,name=array_value,json=arrayValue,proto3,oneof" json:"array_value,omitempty"`
}
type Value_TupleValue struct {
	TupleValue *Record `protobuf:"bytes,10,opt,name=tuple_value,json=tupleValue,proto3,oneof" json:"tuple_value,omitempty"`
}
type Value_DecimalValue struct {
	DecimalValue *Decimal `protobuf:"bytes,11,opt,name=decimal_value,json=decimalValue,proto3,oneof" json:"decimal_value,omitempty"`
}
type Value_DateValue struct {
	DateValue string `protobuf:"bytes,12,opt,name=date_value,json=dateValue,proto3,oneof" json:"date_value,omitempty"`
}
type Value_IntervalValue struct {
	IntervalValue string `protobuf:"bytes,13,opt,name=interval_value,json=intervalValue,proto3,oneof" json:"interval_value,omitempty"`
}
type Value_TimeValue struct {
	TimeValue string `protobuf:"bytes,14,opt,name=time_value,json=timeValue,proto3,oneof" json:"time_value,omitempty"`
}
type Value_UuidValue struct {
	UuidValue string `protobuf:"bytes,15,opt,name=uuid_value,json=uuidValue,proto3,oneof" json:"uuid_value,omitempty"`
}

func (*Value_StringValue) isValue_Value()    {}
func (*Value_BytesValue) isValue_Value()     {}
func (*Value_Int32Value) isValue_Value()     {}
func (*Value_Int64Value) isValue_Value()     {}
func (*Value_FloatValue) isValue_Value()     {}
func (*Value_DoubleValue) isValue_Value()    {}
func (*Value_BoolValue) isValue_Value()      {}
func (*Value_TimestampValue) isValue_Value() {}
func (*Value_ArrayValue) isValue_Value()     {}
func (*Value_TupleValue) isValue_Value()     {}
func (*Value_DecimalValue) isValue_Value()   {}
func (*Value_DateValue) isValue_Value()      {}
func (*Value_IntervalValue) isValue_Value()  {}
func (*Value_TimeValue) isValue_Value()      {}
func (*Value_UuidValue) isValue_Value()      {}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetStringValue() string {
	if x, ok := m.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Value) GetBytesValue() []byte {
	if x, ok := m.GetValue().(*Value_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *Value) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*Value_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *Value) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Value_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Value) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Value) GetBoolValue() bool {
	if x, ok := m.GetValue().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *Value) GetTimestampValue() *timestamppb.Timestamp {
	if x, ok := m.GetValue().(*Value_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

func (m *Value) GetArrayValue() *Array {
	if x, ok := m.GetValue().(*Value_ArrayValue); ok {
		return x.ArrayValue
	}
	return nil
}

func (m *Value) GetTupleValue() *Record {
	if x, ok := m.GetValue().(*Value_TupleValue); ok {
		return x.TupleValue
	}
	return nil
}

func (m *Value) GetDecimalValue() *Decimal {
	if x, ok := m.GetValue().(*Value_DecimalValue); ok {
		return x.DecimalValue
	}
	return nil
}

func (m *Value) GetDateValue() string {
	if x, ok := m.GetValue().(*Value_DateValue); ok {
		return x.DateValue
	}
	return ""
}

func (m *Value) GetIntervalValue() string {
	if x, ok := m.GetValue().(*Value_IntervalValue); ok {
		return x.IntervalValue
	}
	return ""
}

func (m *Value) GetTimeValue() string {
	if x, ok := m.GetValue().(*Value_TimeValue); ok {
		return x.TimeValue
	}
	return ""
}

func (m *Value) GetUuidValue() string {
	if x, ok := m.GetValue().(*Value_UuidValue); ok {
		return x.UuidValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Value) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Value_StringValue)(nil),
		(*Value_BytesValue)(nil),
		(*Value_Int32Value)(nil),
		(*Value_Int64Value)(nil),
		(*Value_FloatValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_BoolValue)(nil),
		(*Value_TimestampValue)(nil),
		(*Value_ArrayValue)(nil),
		(*Value_TupleValue)(nil),
		(*Value_DecimalValue)(nil),
		(*Value_DateValue)(nil),
		(*Value_IntervalValue)(nil),
		(*Value_TimeValue)(nil),
		(*Value_UuidValue)(nil),
	}
}

// Key contains the primary key values for a row.
type Key struct {
	Key map[string]*Value `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Key) Reset()      { *m = Key{} }
func (*Key) ProtoMessage() {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{10}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Key.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return m.Size()
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKey() map[string]*Value {
	if m != nil {
		return m.Key
	}
	return nil
}

// Array represents an ordered list of values.
type Array struct {
	Values []*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *Array) Reset()      { *m = Array{} }
func (*Array) ProtoMessage() {}
func (*Array) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{11}
}
func (m *Array) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Array) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Array.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Array) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Array.Merge(m, src)
}
func (m *Array) XXX_Size() int {
	return m.Size()
}
func (m *Array) XXX_DiscardUnknown() {
	xxx_messageInfo_Array.DiscardUnknown(m)
}

var xxx_messageInfo_Array proto.InternalMessageInfo

func (m *Array) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

// Decimal contains a fixed-point decimal value represented as a string.
type Decimal struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Decimal) Reset()      { *m = Decimal{} }
func (*Decimal) ProtoMessage() {}
func (*Decimal) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{12}
}
func (m *Decimal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Decimal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Decimal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Decimal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decimal.Merge(m, src)
}
func (m *Decimal) XXX_Size() int {
	return m.Size()
}
func (m *Decimal) XXX_DiscardUnknown() {
	xxx_messageInfo_Decimal.DiscardUnknown(m)
}

var xxx_messageInfo_Decimal proto.InternalMessageInfo

func (m *Decimal) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Record represents a flat mapping of column names to values for a row.
type Record struct {
	Values map[string]*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Record) Reset()      { *m = Record{} }
func (*Record) ProtoMessage() {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_25a22667a75f3c23, []int{13}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetValues() map[string]*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterEnum("changefeedpb.Op", Op_name, Op_value)
	proto.RegisterType((*MessageBatch)(nil), "changefeedpb.MessageBatch")
	proto.RegisterType((*Message)(nil), "changefeedpb.Message")
	proto.RegisterType((*WrappedEnvelope)(nil), "changefeedpb.WrappedEnvelope")
	proto.RegisterType((*BareEnvelope)(nil), "changefeedpb.BareEnvelope")
	proto.RegisterMapType((map[string]*Value)(nil), "changefeedpb.BareEnvelope.ValuesEntry")
	proto.RegisterType((*BareResolved)(nil), "changefeedpb.BareResolved")
	proto.RegisterType((*EnrichedEnvelope)(nil), "changefeedpb.EnrichedEnvelope")
	proto.RegisterType((*Resolved)(nil), "changefeedpb.Resolved")
	proto.RegisterType((*EnrichedSource)(nil), "changefeedpb.EnrichedSource")
	proto.RegisterType((*Metadata)(nil), "changefeedpb.Metadata")
	proto.RegisterType((*Value)(nil), "changefeedpb.Value")
	proto.RegisterType((*Key)(nil), "changefeedpb.Key")
	proto.RegisterMapType((map[string]*Value)(nil), "changefeedpb.Key.KeyEntry")
	proto.RegisterType((*Array)(nil), "changefeedpb.Array")
	proto.RegisterType((*Decimal)(nil), "changefeedpb.Decimal")
	proto.RegisterType((*Record)(nil), "changefeedpb.Record")
	proto.RegisterMapType((map[string]*Value)(nil), "changefeedpb.Record.ValuesEntry")
}

func init() { proto.RegisterFile("proto/changefeed.proto", fileDescriptor_25a22667a75f3c23) }

var fileDescriptor_25a22667a75f3c23 = []byte{
	// 1290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x5d, 0x6f, 0xdc, 0x44,
	0x17, 0xc7, 0xd7, 0xfb, 0xee, 0xb3, 0x2f, 0xd9, 0x67, 0xda, 0xe6, 0xb1, 0x02, 0x75, 0x52, 0x57,
	0xb4, 0xa5, 0x54, 0x1b, 0x94, 0x46, 0xa1, 0x40, 0x55, 0x68, 0x1a, 0xa3, 0x44, 0x29, 0x49, 0xe4,
	0xbe, 0x20, 0x71, 0x63, 0x8d, 0xed, 0xc9, 0xae, 0x1b, 0xaf, 0xc7, 0xb2, 0xbd, 0x41, 0x7b, 0xd7,
	0x2b, 0x24, 0x24, 0x2e, 0x10, 0x9f, 0x82, 0x0f, 0xc0, 0x87, 0xe0, 0x0a, 0xf5, 0xb2, 0x97, 0x74,
	0x7b, 0x01, 0x97, 0xfd, 0x04, 0x08, 0xcd, 0x8b, 0x1d, 0xef, 0xb2, 0x2d, 0x48, 0xc0, 0x85, 0x2f,
	0xe6, 0x3f, 0xbf, 0x73, 0xe6, 0xcc, 0x39, 0x73, 0x66, 0x0c, 0xcb, 0x51, 0x4c, 0x53, 0xba, 0xee,
	0x0e, 0x71, 0x38, 0x20, 0xc7, 0x84, 0x78, 0x7d, 0x2e, 0xa0, 0xf6, 0x99, 0x12, 0x39, 0x2b, 0xab,
	0x03, 0x4a, 0x07, 0x01, 0x59, 0xe7, 0x73, 0xce, 0xf8, 0x78, 0x3d, 0xf5, 0x47, 0x24, 0x49, 0xf1,
	0x28, 0x12, 0xb8, 0xf1, 0x09, 0xb4, 0x3f, 0x27, 0x49, 0x82, 0x07, 0x64, 0x1b, 0xa7, 0xee, 0x10,
	0xad, 0x43, 0x23, 0xc2, 0x93, 0x80, 0x62, 0x4f, 0x53, 0xd6, 0x2a, 0xd7, 0x5a, 0x1b, 0x17, 0xfa,
	0x45, 0x87, 0x7d, 0x09, 0x5b, 0x19, 0x65, 0xfc, 0x58, 0x86, 0x86, 0x14, 0xd1, 0x87, 0xd0, 0xf8,
	0x2a, 0xc6, 0x51, 0x44, 0x98, 0xb1, 0x72, 0xad, 0xb5, 0x71, 0x71, 0xd6, 0xf8, 0x0b, 0x31, 0x69,
	0x86, 0xa7, 0x24, 0xa0, 0x11, 0xd9, 0x2d, 0x59, 0x19, 0x8f, 0xde, 0x87, 0xaa, 0x83, 0x63, 0xa2,
	0x95, 0xb9, 0xdd, 0xca, 0xac, 0xdd, 0x36, 0x8e, 0x49, 0xc1, 0x88, 0x93, 0xe8, 0x36, 0x34, 0x49,
	0x18, 0xfb, 0xee, 0x90, 0x78, 0x5a, 0x85, 0x5b, 0xe9, 0xb3, 0x56, 0xa6, 0x9c, 0x2d, 0x58, 0xe6,
	0x16, 0x68, 0x13, 0x9a, 0x31, 0x49, 0x68, 0x70, 0x4a, 0x3c, 0xad, 0xca, 0xad, 0x97, 0x67, 0xad,
	0x2d, 0x39, 0xcb, 0xac, 0x32, 0x12, 0x7d, 0x0a, 0x6d, 0xb6, 0x76, 0x36, 0xa7, 0xd5, 0x5e, 0x17,
	0x6d, 0xc1, 0x7a, 0xc6, 0x62, 0xbb, 0x0e, 0x55, 0x0f, 0xa7, 0xd8, 0xf8, 0x55, 0x81, 0xa5, 0xb9,
	0x74, 0xa0, 0xeb, 0x50, 0xc3, 0xc7, 0x29, 0x89, 0x65, 0xf2, 0xce, 0xcf, 0x07, 0xe4, 0xd2, 0xd8,
	0xb3, 0x04, 0x82, 0x6e, 0x40, 0xdd, 0x21, 0xc7, 0x34, 0xcf, 0xd8, 0x62, 0x58, 0x32, 0x48, 0x83,
	0xc6, 0x38, 0xf2, 0x70, 0x2a, 0x37, 0xab, 0x5a, 0xd9, 0x10, 0xbd, 0x03, 0xdd, 0xd1, 0xa9, 0xeb,
	0xda, 0xf9, 0xb9, 0xe0, 0x7b, 0x52, 0xad, 0x0e, 0x53, 0x1f, 0x66, 0x22, 0xba, 0x0c, 0x95, 0x13,
	0x32, 0xd1, 0xea, 0x7c, 0xad, 0xff, 0xcd, 0xae, 0xb5, 0x4f, 0x26, 0x16, 0x9b, 0x45, 0xe7, 0xa1,
	0x96, 0xd2, 0xc8, 0x77, 0xb5, 0x06, 0x77, 0x21, 0x06, 0xc6, 0xcf, 0x0a, 0xb4, 0x8b, 0x05, 0x44,
	0x77, 0xa0, 0x7e, 0x8a, 0x83, 0x31, 0x49, 0xe4, 0x09, 0xbb, 0xf2, 0xfa, 0x62, 0xf7, 0x1f, 0x73,
	0xd0, 0x0c, 0xd3, 0x78, 0x62, 0x49, 0x2b, 0xd4, 0x87, 0xa6, 0x6d, 0xbb, 0xb1, 0xe7, 0xd8, 0xb6,
	0xdc, 0xfc, 0xf2, 0xfc, 0x19, 0x4d, 0x31, 0x4b, 0xb2, 0x55, 0xbd, 0x17, 0x7b, 0xce, 0xca, 0x01,
	0xb4, 0x0a, 0x6e, 0x50, 0x4f, 0x6c, 0x45, 0xe1, 0x31, 0xf2, 0xb8, 0xdf, 0x85, 0x1a, 0x77, 0x2d,
	0xbd, 0x9d, 0x9b, 0xf5, 0xc6, 0x6d, 0x2d, 0x41, 0x7c, 0x54, 0xbe, 0xa5, 0x18, 0x77, 0xc4, 0x7e,
	0xb2, 0x92, 0xce, 0xc4, 0xa3, 0xbc, 0xe9, 0x28, 0x89, 0x78, 0x8c, 0xdf, 0x15, 0xe8, 0xcd, 0x9f,
	0xcd, 0xff, 0xb0, 0xf6, 0x6b, 0x50, 0xa6, 0x11, 0xef, 0x90, 0xee, 0x46, 0x6f, 0x96, 0x3c, 0x8c,
	0xac, 0x32, 0xcd, 0x8b, 0x5b, 0x7d, 0x63, 0x71, 0xcf, 0x41, 0x2d, 0x4d, 0xec, 0x30, 0xe1, 0xe7,
	0xa3, 0x62, 0x55, 0xd3, 0xe4, 0x20, 0x41, 0x9b, 0x50, 0x4f, 0xe8, 0x38, 0x76, 0x89, 0x3c, 0x19,
	0x6f, 0x2f, 0xee, 0xc0, 0x07, 0x9c, 0xb1, 0x24, 0x6b, 0x5c, 0x81, 0x66, 0x9e, 0xbc, 0x95, 0x42,
	0x1f, 0x8a, 0x92, 0xe4, 0x63, 0xe3, 0xdb, 0x2a, 0x74, 0x67, 0x5d, 0xa0, 0x0b, 0x50, 0x7f, 0x42,
	0x1d, 0xdb, 0xcf, 0xe0, 0xda, 0x13, 0xea, 0xec, 0x79, 0xe8, 0x2a, 0x2c, 0x9d, 0x2d, 0x6c, 0x27,
	0x7e, 0x78, 0xc2, 0x53, 0xa3, 0x5a, 0xdd, 0x33, 0xf9, 0x81, 0x1f, 0x9e, 0xa0, 0x8b, 0x00, 0x9e,
	0x63, 0x9f, 0x92, 0x38, 0xf1, 0x69, 0xc8, 0x93, 0xa2, 0x5a, 0xaa, 0xe7, 0x3c, 0x16, 0x02, 0xba,
	0x04, 0x6d, 0x37, 0x18, 0x27, 0x29, 0x89, 0xed, 0x10, 0x8f, 0x88, 0x6c, 0x96, 0x96, 0xd4, 0x0e,
	0xf0, 0x88, 0x30, 0x0f, 0x19, 0xe2, 0x7b, 0xb2, 0x59, 0x54, 0xa9, 0xec, 0xb1, 0x7b, 0xec, 0xbc,
	0xd8, 0xa5, 0x1d, 0x52, 0x8f, 0xd8, 0x01, 0x75, 0x71, 0xe0, 0xa7, 0xa2, 0x73, 0x54, 0x0b, 0x89,
	0xb9, 0x03, 0xea, 0x91, 0xfb, 0x72, 0x06, 0xbd, 0x05, 0x2a, 0x47, 0xf9, 0x82, 0xa2, 0x73, 0x9a,
	0x4c, 0xe0, 0xab, 0xfd, 0x1f, 0x1a, 0x7c, 0xd2, 0xf7, 0xb4, 0x26, 0x9f, 0xaa, 0xb3, 0xe1, 0xde,
	0xa2, 0xbe, 0x55, 0x17, 0xf5, 0x6d, 0x5e, 0x35, 0x28, 0x54, 0xed, 0x02, 0xd4, 0xd3, 0xc4, 0x1e,
	0x06, 0xae, 0xd6, 0x92, 0x8d, 0x9a, 0xec, 0x06, 0x2e, 0x5a, 0x86, 0x3a, 0x8d, 0xfd, 0x81, 0x1f,
	0x6a, 0x6d, 0xb1, 0x94, 0x18, 0xa1, 0xcb, 0xd0, 0x61, 0xdd, 0xe4, 0xe0, 0x44, 0x06, 0xd9, 0xe1,
	0xd3, 0xed, 0x4c, 0xe4, 0x81, 0xae, 0x42, 0x2b, 0x71, 0x87, 0x64, 0x84, 0x05, 0xd2, 0xe5, 0x08,
	0x08, 0x29, 0xcb, 0x5b, 0x8a, 0x9d, 0x40, 0xba, 0x58, 0x12, 0x79, 0xe3, 0x0a, 0x9f, 0xbe, 0x04,
	0xed, 0x28, 0xf6, 0x47, 0x38, 0x9e, 0xd8, 0x27, 0x64, 0x92, 0x68, 0xbd, 0xb5, 0x0a, 0xcb, 0xbc,
	0xd4, 0xf6, 0xc9, 0x24, 0x31, 0xbe, 0x56, 0xa0, 0x99, 0xb5, 0x76, 0xf1, 0x46, 0x53, 0xfe, 0xea,
	0x46, 0x2b, 0xbf, 0xe1, 0x46, 0xab, 0xfc, 0xbd, 0x1b, 0xad, 0x5a, 0xbc, 0xd1, 0xbe, 0xa9, 0x41,
	0x8d, 0xdf, 0x0a, 0xe8, 0x32, 0xb4, 0x93, 0x34, 0xf6, 0xc3, 0x81, 0x2d, 0x2e, 0x10, 0x1e, 0xca,
	0x6e, 0xc9, 0x6a, 0x09, 0x55, 0x40, 0x97, 0xa0, 0xe5, 0x4c, 0x52, 0x92, 0xd8, 0x67, 0x97, 0x4c,
	0x7b, 0xb7, 0x64, 0x01, 0x17, 0x73, 0xc4, 0x0f, 0xd3, 0x9b, 0x1b, 0x12, 0x61, 0x41, 0xd5, 0x18,
	0xc2, 0xc5, 0x22, 0xb2, 0xb5, 0x29, 0x11, 0x16, 0x50, 0x45, 0x22, 0x5b, 0x9b, 0x39, 0x72, 0x1c,
	0x50, 0x9c, 0x4a, 0x84, 0x9d, 0xcd, 0x32, 0x43, 0xb8, 0x98, 0x07, 0xec, 0xd1, 0x31, 0x2b, 0x83,
	0x60, 0xd8, 0xb1, 0x54, 0x58, 0xc0, 0x42, 0x15, 0xd0, 0x2a, 0x80, 0x43, 0x69, 0x20, 0x11, 0x76,
	0x24, 0x9b, 0xbb, 0x25, 0x4b, 0x65, 0x9a, 0x00, 0x4c, 0x58, 0xca, 0xb3, 0x2b, 0xa9, 0xa6, 0x7c,
	0x09, 0xc5, 0xff, 0x46, 0x3f, 0xfb, 0xdf, 0xe8, 0xe7, 0x09, 0xdf, 0x2d, 0x59, 0xdd, 0xdc, 0x48,
	0xb8, 0xd9, 0x82, 0x16, 0x8e, 0x63, 0x3c, 0x91, 0x2e, 0xd4, 0x45, 0xb7, 0xef, 0x5d, 0x06, 0xb0,
	0x4d, 0x70, 0x52, 0xd8, 0x7d, 0x00, 0xad, 0x74, 0x1c, 0xe5, 0x7b, 0x80, 0xd7, 0x5f, 0x82, 0xcc,
	0x90, 0xa3, 0xc2, 0xf0, 0x36, 0x74, 0x3c, 0xe2, 0xfa, 0x23, 0x9c, 0xed, 0xad, 0xc5, 0x4d, 0xe7,
	0x7e, 0x71, 0x76, 0x04, 0xc2, 0x9e, 0x6e, 0x49, 0xe7, 0x69, 0x61, 0x27, 0x4c, 0x9a, 0xb6, 0x65,
	0xa9, 0x55, 0xa6, 0x09, 0xe0, 0x2a, 0x74, 0xfd, 0x30, 0x25, 0xf1, 0x69, 0xee, 0xbf, 0x23, 0xa1,
	0x4e, 0xa6, 0xe7, 0x9e, 0x58, 0x2a, 0x24, 0xd4, 0xcd, 0x3c, 0x31, 0x2d, 0x07, 0xc6, 0x63, 0xdf,
	0x93, 0xc0, 0x52, 0x06, 0x30, 0x8d, 0x03, 0xdb, 0x0d, 0xf9, 0x64, 0x19, 0x4f, 0x15, 0xa8, 0xec,
	0x93, 0x09, 0xba, 0x91, 0xbd, 0x6a, 0x95, 0x3f, 0xff, 0x90, 0xec, 0x93, 0x09, 0xfb, 0xc4, 0x2b,
	0xca, 0xb0, 0x95, 0x7d, 0x68, 0x66, 0xc2, 0x3f, 0x7f, 0x0f, 0x37, 0xa1, 0xc6, 0xab, 0x84, 0xde,
	0x9b, 0x7b, 0xd8, 0x17, 0x1a, 0x4a, 0xc4, 0x58, 0x85, 0x86, 0x4c, 0x34, 0xeb, 0xb2, 0x42, 0xfb,
	0x48, 0xd7, 0xc6, 0xf7, 0x0a, 0xd4, 0x45, 0x15, 0xd1, 0xad, 0x39, 0xc7, 0x6b, 0x8b, 0x6a, 0xbd,
	0xe8, 0x5f, 0xe1, 0xdf, 0x7e, 0xfb, 0xaf, 0x9b, 0x50, 0x3e, 0x8c, 0x10, 0x82, 0xee, 0xe1, 0x91,
	0xfd, 0xe8, 0xe0, 0xc1, 0x91, 0x79, 0x6f, 0xef, 0xb3, 0x3d, 0x73, 0xa7, 0x57, 0x42, 0x1d, 0x50,
	0x0f, 0x8f, 0xec, 0x7b, 0x96, 0x79, 0xf7, 0xa1, 0xd9, 0x53, 0xe4, 0xf0, 0xd1, 0xd1, 0x0e, 0x1b,
	0x96, 0xe5, 0x70, 0xc7, 0xbc, 0x6f, 0x3e, 0x34, 0x7b, 0x95, 0xed, 0xe0, 0xd9, 0x0b, 0xbd, 0xf4,
	0xfc, 0x85, 0x5e, 0x7a, 0xf5, 0x42, 0x57, 0x9e, 0x4e, 0x75, 0xe5, 0x87, 0xa9, 0xae, 0xfc, 0x34,
	0xd5, 0x95, 0x67, 0x53, 0x5d, 0xf9, 0x65, 0xaa, 0x2b, 0xbf, 0x4d, 0xf5, 0xd2, 0xab, 0xa9, 0xae,
	0x7c, 0xf7, 0x52, 0x2f, 0x3d, 0x7b, 0xa9, 0x97, 0x9e, 0xbf, 0xd4, 0x4b, 0x5f, 0x6e, 0x0d, 0xfc,
	0x74, 0x38, 0x76, 0xfa, 0x2e, 0x1d, 0xad, 0xbb, 0xd4, 0x3d, 0x89, 0x29, 0x76, 0x87, 0x9e, 0xb3,
	0x5e, 0x0c, 0x59, 0xfc, 0xe9, 0x7f, 0x5c, 0x94, 0x9c, 0x3a, 0xd7, 0x6e, 0xfe, 0x11, 0x00, 0x00,
	0xff, 0xff, 0xb6, 0x1e, 0x8a, 0x3c, 0x33, 0x0c, 0x00, 0x00,
}

func (x Op) String() string {
	s, ok := Op_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MessageBatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageBatch)
	if !ok {
		that2, ok := that.(MessageBatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Payload) != len(that1.Payload) {
		return false
	}
	for i := range this.Payload {
		if !this.Payload[i].Equal(that1.Payload[i]) {
			return false
		}
	}
	return true
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Data == nil {
		if this.Data != nil {
			return false
		}
	} else if this.Data == nil {
		return false
	} else if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *Message_Wrapped) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_Wrapped)
	if !ok {
		that2, ok := that.(Message_Wrapped)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Wrapped.Equal(that1.Wrapped) {
		return false
	}
	return true
}
func (this *Message_Bare) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_Bare)
	if !ok {
		that2, ok := that.(Message_Bare)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bare.Equal(that1.Bare) {
		return false
	}
	return true
}
func (this *Message_Enriched) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_Enriched)
	if !ok {
		that2, ok := that.(Message_Enriched)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enriched.Equal(that1.Enriched) {
		return false
	}
	return true
}
func (this *Message_Resolved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_Resolved)
	if !ok {
		that2, ok := that.(Message_Resolved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resolved.Equal(that1.Resolved) {
		return false
	}
	return true
}
func (this *Message_BareResolved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_BareResolved)
	if !ok {
		that2, ok := that.(Message_BareResolved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BareResolved.Equal(that1.BareResolved) {
		return false
	}
	return true
}
func (this *WrappedEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WrappedEnvelope)
	if !ok {
		that2, ok := that.(WrappedEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.After.Equal(that1.After) {
		return false
	}
	if !this.Before.Equal(that1.Before) {
		return false
	}
	if this.Updated != that1.Updated {
		return false
	}
	if this.MvccTimestamp != that1.MvccTimestamp {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	return true
}
func (this *BareEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BareEnvelope)
	if !ok {
		that2, ok := that.(BareEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	if !this.XCrdb__.Equal(that1.XCrdb__) {
		return false
	}
	return true
}
func (this *BareResolved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BareResolved)
	if !ok {
		that2, ok := that.(BareResolved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.XCrdb__.Equal(that1.XCrdb__) {
		return false
	}
	return true
}
func (this *EnrichedEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnrichedEnvelope)
	if !ok {
		that2, ok := that.(EnrichedEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.After.Equal(that1.After) {
		return false
	}
	if !this.Before.Equal(that1.Before) {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if this.TsNs != that1.TsNs {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	return true
}
func (this *Resolved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resolved)
	if !ok {
		that2, ok := that.(Resolved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Resolved != that1.Resolved {
		return false
	}
	return true
}
func (this *EnrichedSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnrichedSource)
	if !ok {
		that2, ok := that.(EnrichedSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JobId != that1.JobId {
		return false
	}
	if this.ChangefeedSink != that1.ChangefeedSink {
		return false
	}
	if this.DbVersion != that1.DbVersion {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	if this.SourceNodeLocality != that1.SourceNodeLocality {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if this.MvccTimestamp != that1.MvccTimestamp {
		return false
	}
	if this.TsNs != that1.TsNs {
		return false
	}
	if this.TsHlc != that1.TsHlc {
		return false
	}
	if this.Origin != that1.Origin {
		return false
	}
	if this.DatabaseName != that1.DatabaseName {
		return false
	}
	if this.SchemaName != that1.SchemaName {
		return false
	}
	if this.TableName != that1.TableName {
		return false
	}
	if len(this.PrimaryKeys) != len(that1.PrimaryKeys) {
		return false
	}
	for i := range this.PrimaryKeys {
		if this.PrimaryKeys[i] != that1.PrimaryKeys[i] {
			return false
		}
	}
	return true
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Updated != that1.Updated {
		return false
	}
	if this.MvccTimestamp != that1.MvccTimestamp {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	return true
}
func (this *Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value)
	if !ok {
		that2, ok := that.(Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Value_StringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_StringValue)
	if !ok {
		that2, ok := that.(Value_StringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StringValue != that1.StringValue {
		return false
	}
	return true
}
func (this *Value_BytesValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_BytesValue)
	if !ok {
		that2, ok := that.(Value_BytesValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BytesValue, that1.BytesValue) {
		return false
	}
	return true
}
func (this *Value_Int32Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_Int32Value)
	if !ok {
		that2, ok := that.(Value_Int32Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int32Value != that1.Int32Value {
		return false
	}
	return true
}
func (this *Value_Int64Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_Int64Value)
	if !ok {
		that2, ok := that.(Value_Int64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int64Value != that1.Int64Value {
		return false
	}
	return true
}
func (this *Value_FloatValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_FloatValue)
	if !ok {
		that2, ok := that.(Value_FloatValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FloatValue != that1.FloatValue {
		return false
	}
	return true
}
func (this *Value_DoubleValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_DoubleValue)
	if !ok {
		that2, ok := that.(Value_DoubleValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DoubleValue != that1.DoubleValue {
		return false
	}
	return true
}
func (this *Value_BoolValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_BoolValue)
	if !ok {
		that2, ok := that.(Value_BoolValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoolValue != that1.BoolValue {
		return false
	}
	return true
}
func (this *Value_TimestampValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_TimestampValue)
	if !ok {
		that2, ok := that.(Value_TimestampValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TimestampValue.Equal(that1.TimestampValue) {
		return false
	}
	return true
}
func (this *Value_ArrayValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_ArrayValue)
	if !ok {
		that2, ok := that.(Value_ArrayValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ArrayValue.Equal(that1.ArrayValue) {
		return false
	}
	return true
}
func (this *Value_TupleValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_TupleValue)
	if !ok {
		that2, ok := that.(Value_TupleValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TupleValue.Equal(that1.TupleValue) {
		return false
	}
	return true
}
func (this *Value_DecimalValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_DecimalValue)
	if !ok {
		that2, ok := that.(Value_DecimalValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DecimalValue.Equal(that1.DecimalValue) {
		return false
	}
	return true
}
func (this *Value_DateValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_DateValue)
	if !ok {
		that2, ok := that.(Value_DateValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DateValue != that1.DateValue {
		return false
	}
	return true
}
func (this *Value_IntervalValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_IntervalValue)
	if !ok {
		that2, ok := that.(Value_IntervalValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IntervalValue != that1.IntervalValue {
		return false
	}
	return true
}
func (this *Value_TimeValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_TimeValue)
	if !ok {
		that2, ok := that.(Value_TimeValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeValue != that1.TimeValue {
		return false
	}
	return true
}
func (this *Value_UuidValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_UuidValue)
	if !ok {
		that2, ok := that.(Value_UuidValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UuidValue != that1.UuidValue {
		return false
	}
	return true
}
func (this *Key) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Key)
	if !ok {
		that2, ok := that.(Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Key) != len(that1.Key) {
		return false
	}
	for i := range this.Key {
		if !this.Key[i].Equal(that1.Key[i]) {
			return false
		}
	}
	return true
}
func (this *Array) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Array)
	if !ok {
		that2, ok := that.(Array)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *Decimal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Decimal)
	if !ok {
		that2, ok := that.(Decimal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record)
	if !ok {
		that2, ok := that.(Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *MessageBatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&changefeedpb.MessageBatch{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&changefeedpb.Message{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message_Wrapped) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Message_Wrapped{` +
		`Wrapped:` + fmt.Sprintf("%#v", this.Wrapped) + `}`}, ", ")
	return s
}
func (this *Message_Bare) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Message_Bare{` +
		`Bare:` + fmt.Sprintf("%#v", this.Bare) + `}`}, ", ")
	return s
}
func (this *Message_Enriched) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Message_Enriched{` +
		`Enriched:` + fmt.Sprintf("%#v", this.Enriched) + `}`}, ", ")
	return s
}
func (this *Message_Resolved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Message_Resolved{` +
		`Resolved:` + fmt.Sprintf("%#v", this.Resolved) + `}`}, ", ")
	return s
}
func (this *Message_BareResolved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Message_BareResolved{` +
		`BareResolved:` + fmt.Sprintf("%#v", this.BareResolved) + `}`}, ", ")
	return s
}
func (this *WrappedEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&changefeedpb.WrappedEnvelope{")
	if this.After != nil {
		s = append(s, "After: "+fmt.Sprintf("%#v", this.After)+",\n")
	}
	if this.Before != nil {
		s = append(s, "Before: "+fmt.Sprintf("%#v", this.Before)+",\n")
	}
	s = append(s, "Updated: "+fmt.Sprintf("%#v", this.Updated)+",\n")
	s = append(s, "MvccTimestamp: "+fmt.Sprintf("%#v", this.MvccTimestamp)+",\n")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BareEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&changefeedpb.BareEnvelope{")
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]*Value{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%#v: %#v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	if this.Values != nil {
		s = append(s, "Values: "+mapStringForValues+",\n")
	}
	if this.XCrdb__ != nil {
		s = append(s, "XCrdb__: "+fmt.Sprintf("%#v", this.XCrdb__)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BareResolved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&changefeedpb.BareResolved{")
	if this.XCrdb__ != nil {
		s = append(s, "XCrdb__: "+fmt.Sprintf("%#v", this.XCrdb__)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnrichedEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&changefeedpb.EnrichedEnvelope{")
	if this.After != nil {
		s = append(s, "After: "+fmt.Sprintf("%#v", this.After)+",\n")
	}
	if this.Before != nil {
		s = append(s, "Before: "+fmt.Sprintf("%#v", this.Before)+",\n")
	}
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	s = append(s, "TsNs: "+fmt.Sprintf("%#v", this.TsNs)+",\n")
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Resolved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&changefeedpb.Resolved{")
	s = append(s, "Resolved: "+fmt.Sprintf("%#v", this.Resolved)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnrichedSource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&changefeedpb.EnrichedSource{")
	s = append(s, "JobId: "+fmt.Sprintf("%#v", this.JobId)+",\n")
	s = append(s, "ChangefeedSink: "+fmt.Sprintf("%#v", this.ChangefeedSink)+",\n")
	s = append(s, "DbVersion: "+fmt.Sprintf("%#v", this.DbVersion)+",\n")
	s = append(s, "ClusterName: "+fmt.Sprintf("%#v", this.ClusterName)+",\n")
	s = append(s, "ClusterId: "+fmt.Sprintf("%#v", this.ClusterId)+",\n")
	s = append(s, "SourceNodeLocality: "+fmt.Sprintf("%#v", this.SourceNodeLocality)+",\n")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "MvccTimestamp: "+fmt.Sprintf("%#v", this.MvccTimestamp)+",\n")
	s = append(s, "TsNs: "+fmt.Sprintf("%#v", this.TsNs)+",\n")
	s = append(s, "TsHlc: "+fmt.Sprintf("%#v", this.TsHlc)+",\n")
	s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	s = append(s, "DatabaseName: "+fmt.Sprintf("%#v", this.DatabaseName)+",\n")
	s = append(s, "SchemaName: "+fmt.Sprintf("%#v", this.SchemaName)+",\n")
	s = append(s, "TableName: "+fmt.Sprintf("%#v", this.TableName)+",\n")
	s = append(s, "PrimaryKeys: "+fmt.Sprintf("%#v", this.PrimaryKeys)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Metadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&changefeedpb.Metadata{")
	s = append(s, "Updated: "+fmt.Sprintf("%#v", this.Updated)+",\n")
	s = append(s, "MvccTimestamp: "+fmt.Sprintf("%#v", this.MvccTimestamp)+",\n")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&changefeedpb.Value{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Value_StringValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_StringValue{` +
		`StringValue:` + fmt.Sprintf("%#v", this.StringValue) + `}`}, ", ")
	return s
}
func (this *Value_BytesValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_BytesValue{` +
		`BytesValue:` + fmt.Sprintf("%#v", this.BytesValue) + `}`}, ", ")
	return s
}
func (this *Value_Int32Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_Int32Value{` +
		`Int32Value:` + fmt.Sprintf("%#v", this.Int32Value) + `}`}, ", ")
	return s
}
func (this *Value_Int64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_Int64Value{` +
		`Int64Value:` + fmt.Sprintf("%#v", this.Int64Value) + `}`}, ", ")
	return s
}
func (this *Value_FloatValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_FloatValue{` +
		`FloatValue:` + fmt.Sprintf("%#v", this.FloatValue) + `}`}, ", ")
	return s
}
func (this *Value_DoubleValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_DoubleValue{` +
		`DoubleValue:` + fmt.Sprintf("%#v", this.DoubleValue) + `}`}, ", ")
	return s
}
func (this *Value_BoolValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_BoolValue{` +
		`BoolValue:` + fmt.Sprintf("%#v", this.BoolValue) + `}`}, ", ")
	return s
}
func (this *Value_TimestampValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_TimestampValue{` +
		`TimestampValue:` + fmt.Sprintf("%#v", this.TimestampValue) + `}`}, ", ")
	return s
}
func (this *Value_ArrayValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_ArrayValue{` +
		`ArrayValue:` + fmt.Sprintf("%#v", this.ArrayValue) + `}`}, ", ")
	return s
}
func (this *Value_TupleValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_TupleValue{` +
		`TupleValue:` + fmt.Sprintf("%#v", this.TupleValue) + `}`}, ", ")
	return s
}
func (this *Value_DecimalValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_DecimalValue{` +
		`DecimalValue:` + fmt.Sprintf("%#v", this.DecimalValue) + `}`}, ", ")
	return s
}
func (this *Value_DateValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_DateValue{` +
		`DateValue:` + fmt.Sprintf("%#v", this.DateValue) + `}`}, ", ")
	return s
}
func (this *Value_IntervalValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_IntervalValue{` +
		`IntervalValue:` + fmt.Sprintf("%#v", this.IntervalValue) + `}`}, ", ")
	return s
}
func (this *Value_TimeValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_TimeValue{` +
		`TimeValue:` + fmt.Sprintf("%#v", this.TimeValue) + `}`}, ", ")
	return s
}
func (this *Value_UuidValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&changefeedpb.Value_UuidValue{` +
		`UuidValue:` + fmt.Sprintf("%#v", this.UuidValue) + `}`}, ", ")
	return s
}
func (this *Key) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&changefeedpb.Key{")
	keysForKey := make([]string, 0, len(this.Key))
	for k, _ := range this.Key {
		keysForKey = append(keysForKey, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKey)
	mapStringForKey := "map[string]*Value{"
	for _, k := range keysForKey {
		mapStringForKey += fmt.Sprintf("%#v: %#v,", k, this.Key[k])
	}
	mapStringForKey += "}"
	if this.Key != nil {
		s = append(s, "Key: "+mapStringForKey+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Array) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&changefeedpb.Array{")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Decimal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&changefeedpb.Decimal{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Record) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&changefeedpb.Record{")
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]*Value{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%#v: %#v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	if this.Values != nil {
		s = append(s, "Values: "+mapStringForValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringChangefeed(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MessageBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		for iNdEx := len(m.Payload) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payload[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChangefeed(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message_Wrapped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Wrapped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Wrapped != nil {
		{
			size, err := m.Wrapped.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Message_Bare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Bare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bare != nil {
		{
			size, err := m.Bare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Message_Enriched) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Enriched) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enriched != nil {
		{
			size, err := m.Enriched.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Resolved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Resolved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Resolved != nil {
		{
			size, err := m.Resolved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Message_BareResolved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_BareResolved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BareResolved != nil {
		{
			size, err := m.BareResolved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WrappedEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrappedEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrappedEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.MvccTimestamp) > 0 {
		i -= len(m.MvccTimestamp)
		copy(dAtA[i:], m.MvccTimestamp)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.MvccTimestamp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Updated) > 0 {
		i -= len(m.Updated)
		copy(dAtA[i:], m.Updated)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.Updated)))
		i--
		dAtA[i] = 0x22
	}
	if m.Before != nil {
		{
			size, err := m.Before.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.After != nil {
		{
			size, err := m.After.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BareEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BareEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BareEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XCrdb__ != nil {
		{
			size, err := m.XCrdb__.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for k := range m.Values {
			v := m.Values[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintChangefeed(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintChangefeed(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintChangefeed(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BareResolved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BareResolved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BareResolved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XCrdb__ != nil {
		{
			size, err := m.XCrdb__.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnrichedEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnrichedEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnrichedEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TsNs != 0 {
		i = encodeVarintChangefeed(dAtA, i, uint64(m.TsNs))
		i--
		dAtA[i] = 0x28
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Op != 0 {
		i = encodeVarintChangefeed(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x18
	}
	if m.Before != nil {
		{
			size, err := m.Before.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.After != nil {
		{
			size, err := m.After.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Resolved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resolved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resolved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resolved) > 0 {
		i -= len(m.Resolved)
		copy(dAtA[i:], m.Resolved)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.Resolved)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnrichedSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnrichedSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnrichedSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrimaryKeys) > 0 {
		for iNdEx := len(m.PrimaryKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrimaryKeys[iNdEx])
			copy(dAtA[i:], m.PrimaryKeys[iNdEx])
			i = encodeVarintChangefeed(dAtA, i, uint64(len(m.PrimaryKeys[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SchemaName) > 0 {
		i -= len(m.SchemaName)
		copy(dAtA[i:], m.SchemaName)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.SchemaName)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.DatabaseName) > 0 {
		i -= len(m.DatabaseName)
		copy(dAtA[i:], m.DatabaseName)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.DatabaseName)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TsHlc) > 0 {
		i -= len(m.TsHlc)
		copy(dAtA[i:], m.TsHlc)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.TsHlc)))
		i--
		dAtA[i] = 0x5a
	}
	if m.TsNs != 0 {
		i = encodeVarintChangefeed(dAtA, i, uint64(m.TsNs))
		i--
		dAtA[i] = 0x50
	}
	if len(m.MvccTimestamp) > 0 {
		i -= len(m.MvccTimestamp)
		copy(dAtA[i:], m.MvccTimestamp)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.MvccTimestamp)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SourceNodeLocality) > 0 {
		i -= len(m.SourceNodeLocality)
		copy(dAtA[i:], m.SourceNodeLocality)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.SourceNodeLocality)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DbVersion) > 0 {
		i -= len(m.DbVersion)
		copy(dAtA[i:], m.DbVersion)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.DbVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChangefeedSink) > 0 {
		i -= len(m.ChangefeedSink)
		copy(dAtA[i:], m.ChangefeedSink)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.ChangefeedSink)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x22
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MvccTimestamp) > 0 {
		i -= len(m.MvccTimestamp)
		copy(dAtA[i:], m.MvccTimestamp)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.MvccTimestamp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Updated) > 0 {
		i -= len(m.Updated)
		copy(dAtA[i:], m.Updated)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.Updated)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Value_StringValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_StringValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StringValue)
	copy(dAtA[i:], m.StringValue)
	i = encodeVarintChangefeed(dAtA, i, uint64(len(m.StringValue)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Value_BytesValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_BytesValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BytesValue != nil {
		i -= len(m.BytesValue)
		copy(dAtA[i:], m.BytesValue)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.BytesValue)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Value_Int32Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_Int32Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChangefeed(dAtA, i, uint64(m.Int32Value))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *Value_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_Int64Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChangefeed(dAtA, i, uint64(m.Int64Value))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *Value_FloatValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_FloatValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FloatValue))))
	i--
	dAtA[i] = 0x2d
	return len(dAtA) - i, nil
}
func (m *Value_DoubleValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_DoubleValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleValue))))
	i--
	dAtA[i] = 0x31
	return len(dAtA) - i, nil
}
func (m *Value_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_BoolValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *Value_TimestampValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_TimestampValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimestampValue != nil {
		{
			size, err := m.TimestampValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Value_ArrayValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_ArrayValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ArrayValue != nil {
		{
			size, err := m.ArrayValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Value_TupleValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_TupleValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TupleValue != nil {
		{
			size, err := m.TupleValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Value_DecimalValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_DecimalValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DecimalValue != nil {
		{
			size, err := m.DecimalValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChangefeed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Value_DateValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_DateValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DateValue)
	copy(dAtA[i:], m.DateValue)
	i = encodeVarintChangefeed(dAtA, i, uint64(len(m.DateValue)))
	i--
	dAtA[i] = 0x62
	return len(dAtA) - i, nil
}
func (m *Value_IntervalValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_IntervalValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.IntervalValue)
	copy(dAtA[i:], m.IntervalValue)
	i = encodeVarintChangefeed(dAtA, i, uint64(len(m.IntervalValue)))
	i--
	dAtA[i] = 0x6a
	return len(dAtA) - i, nil
}
func (m *Value_TimeValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_TimeValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TimeValue)
	copy(dAtA[i:], m.TimeValue)
	i = encodeVarintChangefeed(dAtA, i, uint64(len(m.TimeValue)))
	i--
	dAtA[i] = 0x72
	return len(dAtA) - i, nil
}
func (m *Value_UuidValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value_UuidValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.UuidValue)
	copy(dAtA[i:], m.UuidValue)
	i = encodeVarintChangefeed(dAtA, i, uint64(len(m.UuidValue)))
	i--
	dAtA[i] = 0x7a
	return len(dAtA) - i, nil
}
func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		for k := range m.Key {
			v := m.Key[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintChangefeed(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintChangefeed(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintChangefeed(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Array) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Array) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Array) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChangefeed(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Decimal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Decimal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decimal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintChangefeed(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k := range m.Values {
			v := m.Values[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintChangefeed(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintChangefeed(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintChangefeed(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChangefeed(dAtA []byte, offset int, v uint64) int {
	offset -= sovChangefeed(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Payload) > 0 {
		for _, e := range m.Payload {
			l = e.Size()
			n += 1 + l + sovChangefeed(uint64(l))
		}
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *Message_Wrapped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wrapped != nil {
		l = m.Wrapped.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}
func (m *Message_Bare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bare != nil {
		l = m.Bare.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}
func (m *Message_Enriched) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enriched != nil {
		l = m.Enriched.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}
func (m *Message_Resolved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resolved != nil {
		l = m.Resolved.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}
func (m *Message_BareResolved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BareResolved != nil {
		l = m.BareResolved.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}
func (m *WrappedEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.After != nil {
		l = m.After.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	if m.Before != nil {
		l = m.Before.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.Updated)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.MvccTimestamp)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}

func (m *BareEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChangefeed(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovChangefeed(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovChangefeed(uint64(mapEntrySize))
		}
	}
	if m.XCrdb__ != nil {
		l = m.XCrdb__.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}

func (m *BareResolved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XCrdb__ != nil {
		l = m.XCrdb__.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}

func (m *EnrichedEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.After != nil {
		l = m.After.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	if m.Before != nil {
		l = m.Before.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	if m.Op != 0 {
		n += 1 + sovChangefeed(uint64(m.Op))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	if m.TsNs != 0 {
		n += 1 + sovChangefeed(uint64(m.TsNs))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}

func (m *Resolved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Resolved)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}

func (m *EnrichedSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.ChangefeedSink)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.DbVersion)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.SourceNodeLocality)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.MvccTimestamp)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	if m.TsNs != 0 {
		n += 1 + sovChangefeed(uint64(m.TsNs))
	}
	l = len(m.TsHlc)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.DatabaseName)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.SchemaName)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	if len(m.PrimaryKeys) > 0 {
		for _, s := range m.PrimaryKeys {
			l = len(s)
			n += 2 + l + sovChangefeed(uint64(l))
		}
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Updated)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.MvccTimestamp)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}

func (m *Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Value_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovChangefeed(uint64(l))
	return n
}
func (m *Value_BytesValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BytesValue != nil {
		l = len(m.BytesValue)
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}
func (m *Value_Int32Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChangefeed(uint64(m.Int32Value))
	return n
}
func (m *Value_Int64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChangefeed(uint64(m.Int64Value))
	return n
}
func (m *Value_FloatValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *Value_DoubleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *Value_BoolValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Value_TimestampValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimestampValue != nil {
		l = m.TimestampValue.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}
func (m *Value_ArrayValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArrayValue != nil {
		l = m.ArrayValue.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}
func (m *Value_TupleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TupleValue != nil {
		l = m.TupleValue.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}
func (m *Value_DecimalValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecimalValue != nil {
		l = m.DecimalValue.Size()
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}
func (m *Value_DateValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DateValue)
	n += 1 + l + sovChangefeed(uint64(l))
	return n
}
func (m *Value_IntervalValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IntervalValue)
	n += 1 + l + sovChangefeed(uint64(l))
	return n
}
func (m *Value_TimeValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimeValue)
	n += 1 + l + sovChangefeed(uint64(l))
	return n
}
func (m *Value_UuidValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UuidValue)
	n += 1 + l + sovChangefeed(uint64(l))
	return n
}
func (m *Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Key) > 0 {
		for k, v := range m.Key {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChangefeed(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovChangefeed(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovChangefeed(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Array) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovChangefeed(uint64(l))
		}
	}
	return n
}

func (m *Decimal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovChangefeed(uint64(l))
	}
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChangefeed(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovChangefeed(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovChangefeed(uint64(mapEntrySize))
		}
	}
	return n
}

func sovChangefeed(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChangefeed(x uint64) (n int) {
	return sovChangefeed(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MessageBatch) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPayload := "[]*Message{"
	for _, f := range this.Payload {
		repeatedStringForPayload += strings.Replace(f.String(), "Message", "Message", 1) + ","
	}
	repeatedStringForPayload += "}"
	s := strings.Join([]string{`&MessageBatch{`,
		`Payload:` + repeatedStringForPayload + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_Wrapped) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_Wrapped{`,
		`Wrapped:` + strings.Replace(fmt.Sprintf("%v", this.Wrapped), "WrappedEnvelope", "WrappedEnvelope", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_Bare) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_Bare{`,
		`Bare:` + strings.Replace(fmt.Sprintf("%v", this.Bare), "BareEnvelope", "BareEnvelope", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_Enriched) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_Enriched{`,
		`Enriched:` + strings.Replace(fmt.Sprintf("%v", this.Enriched), "EnrichedEnvelope", "EnrichedEnvelope", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_Resolved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_Resolved{`,
		`Resolved:` + strings.Replace(fmt.Sprintf("%v", this.Resolved), "Resolved", "Resolved", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_BareResolved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_BareResolved{`,
		`BareResolved:` + strings.Replace(fmt.Sprintf("%v", this.BareResolved), "BareResolved", "BareResolved", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WrappedEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WrappedEnvelope{`,
		`After:` + strings.Replace(this.After.String(), "Record", "Record", 1) + `,`,
		`Before:` + strings.Replace(this.Before.String(), "Record", "Record", 1) + `,`,
		`Updated:` + fmt.Sprintf("%v", this.Updated) + `,`,
		`MvccTimestamp:` + fmt.Sprintf("%v", this.MvccTimestamp) + `,`,
		`Key:` + strings.Replace(this.Key.String(), "Key", "Key", 1) + `,`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BareEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]*Value{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%v: %v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	s := strings.Join([]string{`&BareEnvelope{`,
		`Values:` + mapStringForValues + `,`,
		`XCrdb__:` + strings.Replace(this.XCrdb__.String(), "Metadata", "Metadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BareResolved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BareResolved{`,
		`XCrdb__:` + strings.Replace(this.XCrdb__.String(), "Resolved", "Resolved", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnrichedEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnrichedEnvelope{`,
		`After:` + strings.Replace(this.After.String(), "Record", "Record", 1) + `,`,
		`Before:` + strings.Replace(this.Before.String(), "Record", "Record", 1) + `,`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Key:` + strings.Replace(this.Key.String(), "Key", "Key", 1) + `,`,
		`TsNs:` + fmt.Sprintf("%v", this.TsNs) + `,`,
		`Source:` + strings.Replace(this.Source.String(), "EnrichedSource", "EnrichedSource", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Resolved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Resolved{`,
		`Resolved:` + fmt.Sprintf("%v", this.Resolved) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnrichedSource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnrichedSource{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`ChangefeedSink:` + fmt.Sprintf("%v", this.ChangefeedSink) + `,`,
		`DbVersion:` + fmt.Sprintf("%v", this.DbVersion) + `,`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`SourceNodeLocality:` + fmt.Sprintf("%v", this.SourceNodeLocality) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`MvccTimestamp:` + fmt.Sprintf("%v", this.MvccTimestamp) + `,`,
		`TsNs:` + fmt.Sprintf("%v", this.TsNs) + `,`,
		`TsHlc:` + fmt.Sprintf("%v", this.TsHlc) + `,`,
		`Origin:` + fmt.Sprintf("%v", this.Origin) + `,`,
		`DatabaseName:` + fmt.Sprintf("%v", this.DatabaseName) + `,`,
		`SchemaName:` + fmt.Sprintf("%v", this.SchemaName) + `,`,
		`TableName:` + fmt.Sprintf("%v", this.TableName) + `,`,
		`PrimaryKeys:` + fmt.Sprintf("%v", this.PrimaryKeys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata{`,
		`Updated:` + fmt.Sprintf("%v", this.Updated) + `,`,
		`MvccTimestamp:` + fmt.Sprintf("%v", this.MvccTimestamp) + `,`,
		`Key:` + strings.Replace(this.Key.String(), "Key", "Key", 1) + `,`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_StringValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_StringValue{`,
		`StringValue:` + fmt.Sprintf("%v", this.StringValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_BytesValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_BytesValue{`,
		`BytesValue:` + fmt.Sprintf("%v", this.BytesValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Int32Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Int32Value{`,
		`Int32Value:` + fmt.Sprintf("%v", this.Int32Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Int64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Int64Value{`,
		`Int64Value:` + fmt.Sprintf("%v", this.Int64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_FloatValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_FloatValue{`,
		`FloatValue:` + fmt.Sprintf("%v", this.FloatValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_DoubleValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_DoubleValue{`,
		`DoubleValue:` + fmt.Sprintf("%v", this.DoubleValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_BoolValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_BoolValue{`,
		`BoolValue:` + fmt.Sprintf("%v", this.BoolValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_TimestampValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_TimestampValue{`,
		`TimestampValue:` + strings.Replace(fmt.Sprintf("%v", this.TimestampValue), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_ArrayValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_ArrayValue{`,
		`ArrayValue:` + strings.Replace(fmt.Sprintf("%v", this.ArrayValue), "Array", "Array", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_TupleValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_TupleValue{`,
		`TupleValue:` + strings.Replace(fmt.Sprintf("%v", this.TupleValue), "Record", "Record", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_DecimalValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_DecimalValue{`,
		`DecimalValue:` + strings.Replace(fmt.Sprintf("%v", this.DecimalValue), "Decimal", "Decimal", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_DateValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_DateValue{`,
		`DateValue:` + fmt.Sprintf("%v", this.DateValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_IntervalValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_IntervalValue{`,
		`IntervalValue:` + fmt.Sprintf("%v", this.IntervalValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_TimeValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_TimeValue{`,
		`TimeValue:` + fmt.Sprintf("%v", this.TimeValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_UuidValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_UuidValue{`,
		`UuidValue:` + fmt.Sprintf("%v", this.UuidValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Key) String() string {
	if this == nil {
		return "nil"
	}
	keysForKey := make([]string, 0, len(this.Key))
	for k, _ := range this.Key {
		keysForKey = append(keysForKey, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKey)
	mapStringForKey := "map[string]*Value{"
	for _, k := range keysForKey {
		mapStringForKey += fmt.Sprintf("%v: %v,", k, this.Key[k])
	}
	mapStringForKey += "}"
	s := strings.Join([]string{`&Key{`,
		`Key:` + mapStringForKey + `,`,
		`}`,
	}, "")
	return s
}
func (this *Array) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*Value{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(f.String(), "Value", "Value", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&Array{`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *Decimal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Decimal{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record) String() string {
	if this == nil {
		return "nil"
	}
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]*Value{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%v: %v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	s := strings.Join([]string{`&Record{`,
		`Values:` + mapStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringChangefeed(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MessageBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload, &Message{})
			if err := m.Payload[len(m.Payload)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wrapped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WrappedEnvelope{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Wrapped{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BareEnvelope{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Bare{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enriched", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnrichedEnvelope{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Enriched{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Resolved{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_Resolved{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BareResolved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BareResolved{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Message_BareResolved{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WrappedEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrappedEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrappedEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.After == nil {
				m.After = &Record{}
			}
			if err := m.After.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Before == nil {
				m.Before = &Record{}
			}
			if err := m.Before.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MvccTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MvccTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BareEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BareEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BareEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = make(map[string]*Value)
			}
			var mapkey string
			var mapvalue *Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChangefeed
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChangefeed
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChangefeed
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthChangefeed
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChangefeed
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChangefeed
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthChangefeed
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChangefeed(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthChangefeed
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XCrdb__", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XCrdb__ == nil {
				m.XCrdb__ = &Metadata{}
			}
			if err := m.XCrdb__.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BareResolved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BareResolved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BareResolved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XCrdb__", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XCrdb__ == nil {
				m.XCrdb__ = &Resolved{}
			}
			if err := m.XCrdb__.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnrichedEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnrichedEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnrichedEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.After == nil {
				m.After = &Record{}
			}
			if err := m.After.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Before == nil {
				m.Before = &Record{}
			}
			if err := m.Before.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsNs", wireType)
			}
			m.TsNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &EnrichedSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resolved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resolved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resolved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resolved = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnrichedSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnrichedSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnrichedSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedSink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangefeedSink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceNodeLocality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceNodeLocality = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MvccTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MvccTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsNs", wireType)
			}
			m.TsNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsHlc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TsHlc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKeys = append(m.PrimaryKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MvccTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MvccTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Value_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &Value_BytesValue{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Value_Int32Value{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Value_Int64Value{v}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = &Value_FloatValue{float32(math.Float32frombits(v))}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &Value_DoubleValue{float64(math.Float64frombits(v))}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &Value_BoolValue{b}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &timestamppb.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Value_TimestampValue{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrayValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Array{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Value_ArrayValue{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TupleValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Record{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Value_TupleValue{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecimalValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Decimal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Value_DecimalValue{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Value_DateValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Value_IntervalValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Value_TimeValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UuidValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Value_UuidValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = make(map[string]*Value)
			}
			var mapkey string
			var mapvalue *Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChangefeed
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChangefeed
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChangefeed
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthChangefeed
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChangefeed
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChangefeed
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthChangefeed
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChangefeed(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthChangefeed
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Key[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Array) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Array: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Array: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Decimal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decimal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decimal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = make(map[string]*Value)
			}
			var mapkey string
			var mapvalue *Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChangefeed
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChangefeed
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChangefeed
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthChangefeed
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChangefeed
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChangefeed
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthChangefeed
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChangefeed(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthChangefeed
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChangefeed(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChangefeed
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChangefeed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChangefeed
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChangefeed
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChangefeed
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChangefeed        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChangefeed          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChangefeed = fmt.Errorf("proto: unexpected end of group")
)
